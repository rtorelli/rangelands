runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
state <- readOGR("shp/state.shp", layer = "state")
name(state)
names(state)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
state$NAME
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
district <- readOGR("shp/district.shp", layer = "district")
names(district)
runApp()
runApp()
labels <- sprintf(
"<strong>%s</strong><br/>",
state$NAME
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
labels <- sprintf(
"<strong>%s</strong><br/>",
state$NAME
) %>% lapply(htmltools::HTML)
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
states <- readOGR("shp/state.shp", layer = "state")
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
labels <- sprintf(
"<strong>%s</strong><br/>",
state$NAME
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
labels <- sprintf(
"<strong>%s</strong><br/>",
state$NAME
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = "white",
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
runApp()
runApp()
runApp()
county <- readOGR("shp/county.shp", layer = "county")
names(county)
runApp()
runApp()
runApp()
runApp()
runApp()
state.name
state.name[0]
state.name[1]
runApp()
state.name
runApp()
district$CDSESSN
district$STATEFP
district.state
district.name
district$AFFGEOID
district$STATEFP
district$GEOID
district$LSAD
district$ALAND
district$AWATER
runApp()
runApp()
county$STATEFP
runApp()
state.name
runApp()
runApp()
runApp()
district$STATEFP
state.name
state$name
state$NAME
x = {
"01": "Alabama",
"02": "Alaska",
"04": "Arizona",
"05": "Arkansas",
"06": "California",
"08": "Colorado",
"09": "Connecticut",
"10": "Delaware",
"11": "District of Columbia",
"12": "Florida",
"13": "Geogia",
"15": "Hawaii",
"16": "Idaho",
"17": "Illinois",
"18": "Indiana",
"19": "Iowa",
"20": "Kansas",
"21": "Kentucky",
"22": "Louisiana",
"23": "Maine",
"24": "Maryland",
"25": "Massachusetts",
"26": "Michigan",
"27": "Minnesota",
"28": "Mississippi",
"29": "Missouri",
"30": "Montana",
"31": "Nebraska",
"32": "Nevada",
"33": "New Hampshire",
"34": "New Jersey",
"35": "New Mexico",
"36": "New York",
"37": "North Carolina",
"38": "North Dakota",
"39": "Ohio",
"40": "Oklahoma",
"41": "Oregon",
"42": "Pennsylvania",
"44": "Rhode Island",
"45": "South Carolina",
"46": "South Dakota",
"47": "Tennessee",
"48": "Texas",
"49": "Utah",
"50": "Vermont",
"51": "Virginia",
"53": "Washington",
"54": "West Virginia",
"55": "Wisconsin",
"56": "Wyoming"
}
x = '{
"01": "Alabama",
"02": "Alaska",
"04": "Arizona",
"05": "Arkansas",
"06": "California",
"08": "Colorado",
"09": "Connecticut",
"10": "Delaware",
"11": "District of Columbia",
"12": "Florida",
"13": "Geogia",
"15": "Hawaii",
"16": "Idaho",
"17": "Illinois",
"18": "Indiana",
"19": "Iowa",
"20": "Kansas",
"21": "Kentucky",
"22": "Louisiana",
"23": "Maine",
"24": "Maryland",
"25": "Massachusetts",
"26": "Michigan",
"27": "Minnesota",
"28": "Mississippi",
"29": "Missouri",
"30": "Montana",
"31": "Nebraska",
"32": "Nevada",
"33": "New Hampshire",
"34": "New Jersey",
"35": "New Mexico",
"36": "New York",
"37": "North Carolina",
"38": "North Dakota",
"39": "Ohio",
"40": "Oklahoma",
"41": "Oregon",
"42": "Pennsylvania",
"44": "Rhode Island",
"45": "South Carolina",
"46": "South Dakota",
"47": "Tennessee",
"48": "Texas",
"49": "Utah",
"50": "Vermont",
"51": "Virginia",
"53": "Washington",
"54": "West Virginia",
"55": "Wisconsin",
"56": "Wyoming"
}'
x
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x
v <- read.table(x)
install.package("rjson")
install.packages("rjson")
install.packages("rjson")
library(rjson)
library(rjson)
JsonData <- fromJSON(x)
library(jsonlite)
JsonData <- read_json(x)
JsonData <- read_json('FPtoState.txt')
JsonData
json[1]
shiny::runApp()
runApp()
shiny::runApp()
install.packages("rjson")
runApp()
library(jsonlite)
v <- read.table(x)
JsonData <- read_json('FPtoState.txt')
JsonData
JsonData[1]
JsonData[2]
JsonData[6]
JsonData[5]
JsonData$6`06`
JsonData$6
JsonData$'06'
runApp()
JsonData$to.String(06)
JsonData$toString(06)
v = toString(06)
v
JsonData <- read_json('FPtoState.txt')
JsonData$toString(06)
JsonData$v
JsonData
JsonData%'6'
JsonData$'6'
JsonData$v
v = toString(6)
JsonData$v
JsonData$50
JsonData$'50'
JsonData$"50"
v = toString(50)
JsonData$V
JsonData$v
v = "50"
JsonData$v
JsonData$toString(v)
i = 5
i
i = toString(5)
i
"5"
JsonData$`56`
JsonData$i
JsonData$"i"
JsonData[i]
runApp()
runApp()
runApp()
county <- readOGR("shp/county.shp", layer = "county")
county$STATEFP
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
district
county$STATEFP
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
multiRaster <- stack("a1bnpp.tif")
multiRaster
hist(multiRaster)
view(multiRaster)
View(multiRaster)
temp <- multiRaster[:1]
temp <- multiRaster[1]
View(temp)
temp <- multiRaster[1,]
View(temp)
view(multiRaster[1,])
View(multiRaster[1,])
View(multiRaster[1])
View(multiRaster[,1])
hist(multiRaster[1,])
df <- data.frame(multiRaster)
df <- as.data.frame(multiRaster)
View(df[1,])
View(df[1])
hist(df[1])
hist(df)
raster <- as.raster(df)
library(raster)
raster <- raster(df)
coordinates(df) <- ~ x + y
sapply(df, function(x) max(as.character(x)) )
multiRaster[1]
multiRaster[,1]
View(multiRaster$a1bnpp.1)
hist(multiRaster$a1bnpp.1)
x <- multiRaster[1]
x
x <- multiRaster$a1bnpp.1
x
View(x)
do.call( rbind, multiRaster)[,1]
do.call( rbind, multiRaster$a1bnpp.1)[,1]
library(dplyr)
nth(multiRaster, 1)
View(nth(multiRaster, 1))
hist(nth(multiRaster, 1))
runApp()
runApp()
runApp()
{
x = x + 2
}
{
x = x + 2
}par(mfrow=c(4,2))
{
x = x + 2
}par(mar = rep(2, 4))
{
x = x + 2
}hist(nth(multiRaster, x))
output$histPlot <- renderPlot({
# generate an rnorm distribution and plot it
#multiRaster <- stack("a1bvulstk.tif")
multiRaster <- stack(paste(input$climate,input$indicator,".tif",sep=""))
x = -1
d = input$Decades
if(d == 2)
{
x = x + 2
}
if(d == 2)
{
x = x + 2
}
if(d == 2)
{
x = x + 2
}
if(d == 2)
{
x = x + 2
}par(mfrow=c(4,2))
if(d == 2)
{
x = x + 2
}par(mar = rep(2, 4))
if(d == 2)
{
x = x + 2
}hist(nth(multiRaster, x))
if(d == 2)
{
x = x + 2
}})
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
bsExample("Modals")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
install.packages("shinydashboard")
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
